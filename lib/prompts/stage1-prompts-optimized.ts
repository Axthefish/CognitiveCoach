/**
 * Stage 1 Prompt 模板 - 通用框架生成 (OPTIMIZED VERSION)
 * 
 * 优化要点:
 * 1. 增加思维链 (Chain of Thought)
 * 2. 提供Few-shot示例
 * 3. 具体化权重计算标准
 * 4. 增加自我验证机制
 */

import type { PurposeDefinition } from '@/lib/types-v2';

export function getFrameworkGenerationPromptV2(purpose: PurposeDefinition): string {
  return `你是一个专业的知识架构师和学习专家。你将通过**三个步骤**生成一个高质量的通用框架。

**用户目的：**
${purpose.clarifiedPurpose}

**问题域：**
${purpose.problemDomain}

**问题域边界：**
${purpose.domainBoundary}

**关键约束：**
${purpose.keyConstraints.map(c => `- ${c}`).join('\n')}

---

## 📚 参考示例 (用于calibrate你的判断)

**示例1: 学习Python用于数据分析**

目的: "能独立完成业务数据的清洗、分析和可视化报告"

关键节点权重推理:
- **Python基础语法** 
  - necessity: 1.0 (没有基础完全无法开始)
  - impact: 0.7 (对最终目标是基础性支撑,不是核心)
  - timeROI: 0.95 (2-3周投入,终身受用,性价比极高)
  - → **最终权重: 87%** (核心必修)
  - 推理: 虽然不是数据分析的核心技能,但是绝对前置,必须掌握

- **Pandas库**
  - necessity: 0.95 (理论上可以用numpy,但效率低10倍)
  - impact: 1.0 (这是数据分析的第一工具,直接决定效率)
  - timeROI: 0.9 (3-4周投入,覆盖90%的实际工作场景)
  - → **最终权重: 95%** (核心必修)
  - 推理: 这是最高频使用的工具,投入产出比最高

- **统计学基础**
  - necessity: 0.5 (不懂统计也能做基础的数据处理)
  - impact: 0.7 (影响分析深度,但不影响基本功能)
  - timeROI: 0.4 (需要较长时间系统学习,但日常使用频率不高)
  - → **最终权重: 54%** (可选增强)
  - 推理: 对于业务数据分析,基础统计够用,深度统计可后续按需学

- **SQL数据库**
  - necessity: 0.6 (数据可以从CSV获取,但实际工作中多数来自数据库)
  - impact: 0.8 (影响数据获取效率,但不影响分析本身)
  - timeROI: 0.85 (基础SQL很快学会,实用性强)
  - → **最终权重: 75%** (重要推荐)
  - 推理: 实际工作必需,但对于"学习数据分析"本身不是核心

**示例2: 个人博客搭建**

目的: "搭建一个可以发文章的博客,能自定义样式"

关键对比:
- HTML/CSS基础: 90% (必需,影响大,快速见效)
- JavaScript: 70% (推荐,增强交互,但静态博客可不用)
- React框架: 40% (对于简单博客过度工程,性价比低)
- 部署知识: 85% (必需,否则博客无法上线)

注意: 同样是"前端技能",在不同目的下权重完全不同!

---

## 🎯 你的任务

### **第一步: 深度分析 (请详细写出你的思考过程)**

回答以下问题:

1. **核心挑战识别**
   这个问题域的核心挑战是什么? (1-2句话)
   
2. **关键路径分析**
   从起点到目的地,最关键的路径是什么? 为什么?
   列出3-5个必经节点,解释必要性
   
3. **约束影响评估**
   用户的关键约束(${purpose.keyConstraints.join(', ')})如何影响框架设计?
   哪些节点会因此变得更重要/不重要?

### **第二步: 构建框架**

基于上述分析,设计框架:

**节点设计要求:**
- 数量: 根据复杂度选择
  * 简单目标(单一技能): 5-7个节点
  * 中等复杂度(小项目): 7-9个节点
  * 复杂目标(系统性变化): 9-12个节点
- 粒度: 每个节点应该是"可以在1-4周完成的独立模块"
- 类型: 必须包含 1个input节点 + N个process节点 + 1个output节点

**权重计算详细标准:**

**a) 必要性 (necessity)**: 0-1
评分标准:
- 1.0 = 绝对前置,没有它后续完全无法进行
  * 示例: 学编程前必须会基本电脑操作
- 0.8-0.9 = 强依赖,跳过会严重影响质量  
  * 示例: 做数据分析前学Python基础
- 0.5-0.7 = 弱依赖,可以边做边学
  * 示例: 建网站时学SEO优化
- 0.3-0.4 = 独立模块,顺序灵活
  * 示例: 学React时学Redux状态管理
- 0-0.2 = 完全独立,纯增强性质
  * 示例: 学Python时了解语言发展历史

判断技巧: "如果跳过这个节点直接去下一个,用户会卡住吗?"

**b) 影响力 (impact)**: 0-1  
评分标准:
- 1.0 = 直接构成最终目标的核心能力
  * 示例: "学数据分析"中的Pandas操作
- 0.8-0.9 = 显著影响目标达成质量
  * 示例: "学数据分析"中的可视化能力
- 0.5-0.7 = 间接支撑,有它更好
  * 示例: "学数据分析"中的SQL知识
- 0.3-0.4 = 边缘增强,锦上添花
  * 示例: "学数据分析"中的云计算部署
- 0-0.2 = 几乎不影响核心目标
  * 示例: "学数据分析"中的Spark大数据(如果用户只处理小数据集)

判断技巧: "掌握这个节点后,能多大程度解决用户的核心问题?"

**c) 时间投资回报率 (timeROI)**: 0-1
评分标准:
- 1.0 = 极高ROI (1周投入,核心价值)
  * 示例: 学会Git基础操作(1周学会,终身受用)
- 0.8-0.9 = 高ROI (2-4周投入,高频使用)
  * 示例: 学习Python基础语法
- 0.5-0.7 = 中等ROI (4-8周投入,中频使用)
  * 示例: 学习React高级模式
- 0.3-0.4 = 低ROI (8周+投入,低频使用)
  * 示例: 系统学习计算机网络原理(对于前端开发者)
- 0-0.2 = 极低ROI (长期投入,边缘价值)
  * 示例: 深入研究编译原理(对于应用开发者)

判断技巧: "性价比 = (对目标的实际贡献) / (学习所需时间成本)"

**权重计算公式:**
```
final_weight = (necessity × 0.4) + (impact × 0.3) + (timeROI × 0.3)
percentage = Math.round(final_weight × 100)
```

**权重分布指导:**
- 核心必修 (90-100%): 应该控制在 2-4个 (最关键的节点)
- 重要推荐 (70-89%): 应该是大部分节点 (4-6个)
- 可选增强 (50-69%): 2-3个 (增强性节点)
- 低优先级 (<50%): 0-1个 (如果有的话,考虑删除)

### **第三步: 自我验证**

输出前检查:
□ 每个节点都有清晰的reasoning说明三个维度的评分理由
□ 权重分布符合上述指导范围
□ mainPath上的节点确实构成了最短必经路径
□ dependencies逻辑合理,没有循环依赖
□ 所有节点的estimatedTime加起来是合理的总时长
□ 描述具体可执行,避免抽象术语

---

## 📤 输出格式

请严格按照以下JSON格式输出：

\`\`\`json
{
  "reasoning": {
    "core_challenge": "...",
    "critical_path": "...",
    "constraint_impact": "..."
  },
  "framework": {
    "purpose": "${purpose.clarifiedPurpose}",
    "domain": "${purpose.problemDomain}",
    "nodes": [
      {
        "id": "unique-node-id",
        "title": "节点标题",
        "description": "详细描述（50-100字,说明这个节点包含什么具体内容）",
        "estimatedTime": "2-3周",
        "nodeType": "input | process | output",
        "dependencies": ["前置节点id"],
        "weightBreakdown": {
          "necessity": 0.9,
          "impact": 0.85,
          "timeROI": 0.8,
          "reasoning": "为什么这样评分? 针对用户的具体目的解释"
        }
      }
    ],
    "edges": [
      {
        "from": "node-id-1",
        "to": "node-id-2",
        "type": "required | recommended | optional",
        "strength": 0.9
      }
    ],
    "mainPath": ["node-1", "node-2", "node-3"],
    "weightingLogic": "整体说明权重分布的设计逻辑"
  },
  "self_check": {
    "weight_distribution": "核心X个(90%+), 重要Y个(70-89%), 可选Z个(<70%)",
    "total_time_estimate": "预计总时长",
    "confidence": 0.9
  }
}
\`\`\`

---

**重要提醒:**
1. 权重必须基于用户的**具体目的**和**约束条件**,不是通用标准
2. 每个评分都要有清晰的reasoning,不要拍脑袋决定
3. 宁可节点少而精,不要为了凑数增加节点
4. 描述要具体可执行,避免"学习XX"这种空泛表达,要说"掌握XX的YY技能,能做ZZ事"
`;
}

// ============================================
// AI 配置
// ============================================

export function getStage1GenerationConfig(runTier: 'Lite' | 'Pro' = 'Pro') {
  return {
    temperature: runTier === 'Lite' ? 0.6 : 0.8,
    maxOutputTokens: runTier === 'Lite' ? 12000 : 20000, // 增加token以容纳更详细的推理
    topP: 0.95,
    topK: 40,
  };
}

